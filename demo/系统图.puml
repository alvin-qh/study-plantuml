@startuml [C4] System Deployment diagram



scale 1

!include <c4/c4_deployment>
!include <tupadr3/font-awesome/users>
!include <cloudinsight/haproxy>
!include <cloudinsight/nginx>
!include <cloudinsight/java>

SHOW_PERSON_OUTLINE()
WithoutPropertyHeader()

' LAYOUT_TOP_DOWN()
' LAYOUT_LEFT_RIGHT()
' LAYOUT_WITH_LEGEND()
' LAYOUT_AS_SKETCH()

Container(k8s_ingress, "Ingress Service", "请求转发及 HTTP 协议网关服务", $sprite="haproxy")

Boundary(FAI_web_server, "首件包管理服务", "Web 服务", "部署于采购商内网环境") {
    Deployment_Node(fontend, "前端容器", "前端资源服务") {
        AddProperty("CPU", "4 core")
        AddProperty("Memory", "8GB")

        Deployment_Node(nginx_pod, "Nginx", "Nginx 1.2", $sprite="nginx") {
            Container(assets, "静态资源", "静态资源包", "Web 前端静态资源包")
        }
    }

    Deployment_Node(backend, "后端服务", "后端 API 服务") {
        AddProperty("CPU", "4 core")
        AddProperty("Memory", "8GB")

        Deployment_Node(backend_pod, "JVM", "OpenJDK 1.8", $sprite="java") {
            AddProperty("MaxConnection", "1024")
            AddProperty("MaxThread", "128")

            Deployment_Node(tomcat, "Tomcat 容器", "Tomcat 9.0") {
                Container(springboot, "Spring Boot", "Spring Boot 2.6", "API 服务")
            }
        }
    }
}

Deployment_Node(db, "数据库", "数据库集群") {
    ContainerDb_Ext(dmdb, "达梦数据库", "DM 8.0")
}

Deployment_Node(redis, "Redis", "Redis 5.0") {
    Container_Ext(redis_cache, "缓存服务", "用户 Session")
}

Deployment_Node(minio, "Minio", "Minio 4.0") {
    Container_Ext(minio_storage, "文档存储服务", "文件存储")
}

Rel_D(k8s_ingress, nginx_pod, "请求转发")

Rel_D(k8s_ingress, tomcat, "请求转发")

Rel_D(springboot, dmdb, "数据库访问")

Rel_D(springboot, redis_cache, "数据缓存")

Rel_D(springboot, minio_storage, "数据缓存")

@enduml